# version: "3.8"
# environment:
#   - AWS_SHARED_CREDENTIALS_FILE=/run/secrets/<NAME_OF_SECRET>
x-aws-vpc: ${AWS_VPC}
x-aws-cluster: ${AWS_ECS_CLUSTER}
x-aws-loadbalancer: ${AWS_ELB}
x-aws-cloudformation:
  Resources:
    VolServicesAppTCP80TargetGroup:
      Properties:
        HealthCheckPath: /health
        Matcher:
          HttpCode: 200-499

services:
  cron:
    # build: .
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    container_name: cron
    env_file: docker-compose.env
    environment:
      SERVICES: cron
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure
    # links:
    #   - nats
    # volumes:
    #   - ./:/app
    depends_on:
      - nats
      - postgresd

  index:
    # build:
    #   context: .
    container_name: index
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    env_file: docker-compose.env
    environment:
      SERVICES: index
    # links:
    #   - nats
    #   - postgresd
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure
    depends_on:
      - ingest

  instrument_info:
    # build:
    #   context: .
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    container_name: instrument_info
    env_file: docker-compose.env
    environment:
      SERVICES: instrument_info
      REDIS_DB: 0
    # links:
    #   - nats
    depends_on:
      - nats
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure

  ingest:
    # build:
    #   context: .
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    container_name: ingest
    env_file: docker-compose.env
    # restart: on-failure
    environment:
      SERVICES: ingest
    # links:
    #   - nats
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure
    depends_on:
      - nats
      - instrument_info

  ws:
    # build:
    #   context: .
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    container_name: ws
    env_file: docker-compose.env
    ports:
      - 3000:3000
    environment:
      SERVICES: ws
    # links:
    #   - nats
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure
    depends_on:
      - nats

  rate:
    # build:
    #   context: .
    image: 994224827437.dkr.ecr.us-east-2.amazonaws.com/compose-pipeline-volatility-services:latest
    x-aws-pull_credentials: arn:aws:secretsmanager:us-east-2:994224827437:secret:dev/docker/ecr-AUOGC7
    container_name: rate
    env_file: docker-compose.env
    environment:
      SERVICES: rate
    # links:
    #   - nats
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure
    depends_on:
      - nats

  nats:
    # platform: linux/amd64
    image: public.ecr.aws/docker/library/nats:2.7.2
    container_name: nats
    env_file: docker-compose.env
    ports:
      - '4222:4222'
    # restart: unless-stopped
    command:
      - '-m'
      - '8222'
      - '--debug'
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure

  postgresd:
    # platform: linux/amd64
    container_name: postgresd
    image: public.ecr.aws/bitnami/postgresql:12.10.0
    env_file: docker-compose.env
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      # - postgres_data:/var/lib/postgresql/data
      # - ./postgres/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure

  redis:
    image: public.ecr.aws/docker/library/redis:6.2
    # image: redis:6.2.6
    # image: arm64v8/redis:6.2.6
    container_name: redis
    env_file: docker-compose.env
    ports:
      - "6379"
    volumes:
      - redis_data:/var/lib/redis/data
    networks:
      - vg-network
    deploy:
      replicas: 1
      # restart_policy:
      #   condition: on-failure

volumes:
  postgres_data:
  redis_data:

networks:
  vg-network:
    # driver: overlay
