"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
!/usr/bin / env;
node;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const utils_1 = require("../functions/utils");
const delegated_dns_stack_1 = require("../lib/delegated-dns-stack");
const fargate_services_stack_1 = require("../lib/fargate-services-stack");
const stack_prefix_1 = require("./../functions/stack_prefix");
const app = new cdk.App();
const dns = utils_1.getEnv(app, "dns");
const dev = utils_1.getEnv(app, "dev");
const prod = utils_1.getEnv(app, "prod");
const stage = utils_1.getEnv(app, "stage");
const automation = utils_1.getEnv(app, "automation");
// const dnsStack = new VgDnsStack(app, "DnsStack", { env: dns })
const subZoneSubDomains = ["ws", "api"];
const automationSubDomains = ["git", "monitoring", "artifacts", "ecr"];
new delegated_dns_stack_1.VgDelegatedDnsStack(app, "AutomationDelegatedDnsStack", {
    ...automation,
    env: automation,
    zoneName: automation.domain,
    stackPrefixFn: stack_prefix_1.stackPrefix("vg", automation.environment, automation.stage),
    crossAccountDelegationRoleArn: automation.crossAccountDelegationRoleArn,
    subjectAlternativeNames: automationSubDomains
});
new delegated_dns_stack_1.VgDelegatedDnsStack(app, "DevDelegatedDnsStack", {
    ...dev,
    env: dev,
    zoneName: dev.domain,
    stackPrefixFn: stack_prefix_1.stackPrefix("vg", dev.environment, dev.stage),
    crossAccountDelegationRoleArn: dev.crossAccountDelegationRoleArn,
    subjectAlternativeNames: subZoneSubDomains
});
new delegated_dns_stack_1.VgDelegatedDnsStack(app, "StageDelegatedDnsStack", {
    ...stage,
    env: stage,
    zoneName: stage.domain,
    stackPrefixFn: stack_prefix_1.stackPrefix("vg", stage.environment, stage.stage),
    crossAccountDelegationRoleArn: stage.crossAccountDelegationRoleArn,
    subjectAlternativeNames: subZoneSubDomains
});
new delegated_dns_stack_1.VgDelegatedDnsStack(app, "ProdDelegatedDnsStack", {
    ...prod,
    env: prod,
    zoneName: prod.domain,
    stackPrefixFn: stack_prefix_1.stackPrefix("vg", prod.environment, prod.stage),
    crossAccountDelegationRoleArn: prod.crossAccountDelegationRoleArn,
    subjectAlternativeNames: subZoneSubDomains
});
// new ChatbotStack(app, "VolatilityServicesChatbotStack", { env: automation })
// new CicdStack(app, "VolatilityServicesCicdPipelineStack", {
//   /* If you don't specify 'env', this stack will be environment-agnostic.
//    * Account/Region-dependent features and context lookups will not work,
//    * but a single synthesized template can be deployed anywhere. */
//   /* Uncomment the next line to specialize this stack for the AWS Account
//    * and Region that are implied by the current CLI configuration. */
//   // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
//   /* Uncomment the next line if you know exactly what Account and Region you
//    * want to deploy the stack to. */
//   //env: { account: "061573364520", region: "us-east-2" } // Automation account
//   env: automation
//   /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
// })
const tagStack = (stack, env) => {
    aws_cdk_lib_1.Tags.of(stack).add("Stage", env.stage);
    aws_cdk_lib_1.Tags.of(stack).add("Environment", env.environment);
    aws_cdk_lib_1.Tags.of(stack).add("Cost", "infra");
    aws_cdk_lib_1.Tags.of(stack).add("Cdk", "true");
};
const vgServicesStackProps = [{ env: dev, platformAccount: "devplatform" }, { env: prod, platformAccount: "prodplatform" }];
// Build the platform stacks
vgServicesStackProps.map(props => {
    const stack = new fargate_services_stack_1.VgServicesStack(app, `${props.env.awsEnv}VolatilityServicesStack`, props);
    tagStack(stack, props.env);
});
// new VgServicesStack(app, "VolatilityServicesStack", { env: dev })
// new VgServicesStack(app, "VolatilityServicesStack", { env: stage })
// new VgServicesStack(app, "VolatilityServicesStack", { env: prod })
// new VgFargateRdsStack(app, "RdsStack", { env: dev })
// const envDevPlatform = { account: "994224827437", region: "us-east-2" }
// const app = new cdk.App()
// console.log()
// new VgDnsStack(app, "DnsStack", { env: dns })
// const stage = app.node.tryGetContext("stage")
//console.log(stage)
// const servicesStack = new VgServicesStack(app, "ServicesStack", { env: envDevPlatform })
// Tag.
// Tag.add(app, "Stage", )
//# sourceMappingURL=data:application/json;base64,