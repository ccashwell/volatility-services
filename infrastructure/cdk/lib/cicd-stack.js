"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CicdStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codepipeline_1 = require("aws-cdk-lib/aws-codepipeline");
const pipleline_config_1 = require("../config/pipleline-config");
const pipeline_notification_1 = require("./notifications/pipeline-notification");
const approval_stage_1 = require("./stages/approval-stage");
const build_stage_1 = require("./stages/build-stage");
const deploy_stage_1 = require("./stages/deploy-stage");
const source_stage_1 = require("./stages/source-stage");
class CicdStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const appName = scope.node.tryGetContext("appName");
        const codepipeline = new aws_codepipeline_1.Pipeline(this, appName, {
            crossAccountKeys: true
        });
        //Source Stage
        const sourceStage = new source_stage_1.SourceStage(this);
        codepipeline.addStage({
            stageName: "Source",
            actions: [sourceStage.getCodeCommitSourceAction()]
        });
        //Build Stage
        const buildStage = new build_stage_1.BuildStage(this);
        codepipeline.addStage({
            stageName: "Build",
            actions: [buildStage.getCodeBuildAction(sourceStage.getSourceOutput())]
        });
        //Staging Stage
        const deployStage = new deploy_stage_1.DeployStage(this);
        codepipeline.addStage({
            stageName: "Deploy-TEST",
            actions: [deployStage.getEcsDeployAction("dev", buildStage.getBuildOutput())]
        });
        //QA Approval Stage
        const approvalStage = new approval_stage_1.ApprovalStage(this);
        codepipeline.addStage({
            stageName: "Approval",
            actions: [approvalStage.getManualApprovalAction()]
        });
        //Deploy to Prod
        codepipeline.addStage({
            stageName: "Deploy-Prod",
            actions: [deployStage.getCodeDeployEcsDeployAction("prod", buildStage.getBuildOutput())]
        });
        //Configure notifications for the pipeline events
        const pipelineNotification = new pipeline_notification_1.PipelineNotification(this);
        pipelineNotification.configureSlackNotifications(codepipeline, pipleline_config_1.PipelineConfig.notification.slack);
    }
}
exports.CicdStack = CicdStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2ljZC1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNpY2Qtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQStDO0FBQy9DLG1FQUF1RDtBQUd2RCxpRUFBMkQ7QUFDM0QsaUZBQTRFO0FBQzVFLDREQUF1RDtBQUN2RCxzREFBaUQ7QUFDakQsd0RBQW1EO0FBQ25ELHdEQUFtRDtBQUVuRCxNQUFhLFNBQVUsU0FBUSxtQkFBSztJQUdsQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRXZCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBVyxDQUFBO1FBRTdELE1BQU0sWUFBWSxHQUFHLElBQUksMkJBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQy9DLGdCQUFnQixFQUFFLElBQUk7U0FDdkIsQ0FBQyxDQUFBO1FBRUYsY0FBYztRQUNkLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN6QyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1NBQ25ELENBQUMsQ0FBQTtRQUVGLGFBQWE7UUFDYixNQUFNLFVBQVUsR0FBRyxJQUFJLHdCQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUNwQixTQUFTLEVBQUUsT0FBTztZQUNsQixPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7U0FDeEUsQ0FBQyxDQUFBO1FBRUYsZUFBZTtRQUNmLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN6QyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDOUUsQ0FBQyxDQUFBO1FBRUYsbUJBQW1CO1FBQ25CLE1BQU0sYUFBYSxHQUFHLElBQUksOEJBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM3QyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1NBQ25ELENBQUMsQ0FBQTtRQUVGLGdCQUFnQjtRQUNoQixZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDekYsQ0FBQyxDQUFBO1FBRUYsaURBQWlEO1FBQ2pELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSw0Q0FBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzRCxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsaUNBQWMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbkcsQ0FBQztDQXNCRjtBQXZFRCw4QkF1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjaywgU3RhY2tQcm9wcyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiXG5pbXBvcnQgeyBQaXBlbGluZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY29kZXBpcGVsaW5lXCJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVjclwiXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiXG5pbXBvcnQgeyBQaXBlbGluZUNvbmZpZyB9IGZyb20gXCIuLi9jb25maWcvcGlwbGVsaW5lLWNvbmZpZ1wiXG5pbXBvcnQgeyBQaXBlbGluZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL25vdGlmaWNhdGlvbnMvcGlwZWxpbmUtbm90aWZpY2F0aW9uXCJcbmltcG9ydCB7IEFwcHJvdmFsU3RhZ2UgfSBmcm9tIFwiLi9zdGFnZXMvYXBwcm92YWwtc3RhZ2VcIlxuaW1wb3J0IHsgQnVpbGRTdGFnZSB9IGZyb20gXCIuL3N0YWdlcy9idWlsZC1zdGFnZVwiXG5pbXBvcnQgeyBEZXBsb3lTdGFnZSB9IGZyb20gXCIuL3N0YWdlcy9kZXBsb3ktc3RhZ2VcIlxuaW1wb3J0IHsgU291cmNlU3RhZ2UgfSBmcm9tIFwiLi9zdGFnZXMvc291cmNlLXN0YWdlXCJcblxuZXhwb3J0IGNsYXNzIENpY2RTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgcmVhZG9ubHkgZWNyUmVwb3NpdG9yeTogUmVwb3NpdG9yeVxuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpXG5cbiAgICBjb25zdCBhcHBOYW1lID0gc2NvcGUubm9kZS50cnlHZXRDb250ZXh0KFwiYXBwTmFtZVwiKSBhcyBzdHJpbmdcblxuICAgIGNvbnN0IGNvZGVwaXBlbGluZSA9IG5ldyBQaXBlbGluZSh0aGlzLCBhcHBOYW1lLCB7XG4gICAgICBjcm9zc0FjY291bnRLZXlzOiB0cnVlXG4gICAgfSlcblxuICAgIC8vU291cmNlIFN0YWdlXG4gICAgY29uc3Qgc291cmNlU3RhZ2UgPSBuZXcgU291cmNlU3RhZ2UodGhpcylcbiAgICBjb2RlcGlwZWxpbmUuYWRkU3RhZ2Uoe1xuICAgICAgc3RhZ2VOYW1lOiBcIlNvdXJjZVwiLFxuICAgICAgYWN0aW9uczogW3NvdXJjZVN0YWdlLmdldENvZGVDb21taXRTb3VyY2VBY3Rpb24oKV1cbiAgICB9KVxuXG4gICAgLy9CdWlsZCBTdGFnZVxuICAgIGNvbnN0IGJ1aWxkU3RhZ2UgPSBuZXcgQnVpbGRTdGFnZSh0aGlzKVxuICAgIGNvZGVwaXBlbGluZS5hZGRTdGFnZSh7XG4gICAgICBzdGFnZU5hbWU6IFwiQnVpbGRcIixcbiAgICAgIGFjdGlvbnM6IFtidWlsZFN0YWdlLmdldENvZGVCdWlsZEFjdGlvbihzb3VyY2VTdGFnZS5nZXRTb3VyY2VPdXRwdXQoKSldXG4gICAgfSlcblxuICAgIC8vU3RhZ2luZyBTdGFnZVxuICAgIGNvbnN0IGRlcGxveVN0YWdlID0gbmV3IERlcGxveVN0YWdlKHRoaXMpXG4gICAgY29kZXBpcGVsaW5lLmFkZFN0YWdlKHtcbiAgICAgIHN0YWdlTmFtZTogXCJEZXBsb3ktVEVTVFwiLFxuICAgICAgYWN0aW9uczogW2RlcGxveVN0YWdlLmdldEVjc0RlcGxveUFjdGlvbihcImRldlwiLCBidWlsZFN0YWdlLmdldEJ1aWxkT3V0cHV0KCkpXVxuICAgIH0pXG5cbiAgICAvL1FBIEFwcHJvdmFsIFN0YWdlXG4gICAgY29uc3QgYXBwcm92YWxTdGFnZSA9IG5ldyBBcHByb3ZhbFN0YWdlKHRoaXMpXG4gICAgY29kZXBpcGVsaW5lLmFkZFN0YWdlKHtcbiAgICAgIHN0YWdlTmFtZTogXCJBcHByb3ZhbFwiLFxuICAgICAgYWN0aW9uczogW2FwcHJvdmFsU3RhZ2UuZ2V0TWFudWFsQXBwcm92YWxBY3Rpb24oKV1cbiAgICB9KVxuXG4gICAgLy9EZXBsb3kgdG8gUHJvZFxuICAgIGNvZGVwaXBlbGluZS5hZGRTdGFnZSh7XG4gICAgICBzdGFnZU5hbWU6IFwiRGVwbG95LVByb2RcIixcbiAgICAgIGFjdGlvbnM6IFtkZXBsb3lTdGFnZS5nZXRDb2RlRGVwbG95RWNzRGVwbG95QWN0aW9uKFwicHJvZFwiLCBidWlsZFN0YWdlLmdldEJ1aWxkT3V0cHV0KCkpXVxuICAgIH0pXG5cbiAgICAvL0NvbmZpZ3VyZSBub3RpZmljYXRpb25zIGZvciB0aGUgcGlwZWxpbmUgZXZlbnRzXG4gICAgY29uc3QgcGlwZWxpbmVOb3RpZmljYXRpb24gPSBuZXcgUGlwZWxpbmVOb3RpZmljYXRpb24odGhpcylcbiAgICBwaXBlbGluZU5vdGlmaWNhdGlvbi5jb25maWd1cmVTbGFja05vdGlmaWNhdGlvbnMoY29kZXBpcGVsaW5lLCBQaXBlbGluZUNvbmZpZy5ub3RpZmljYXRpb24uc2xhY2spXG4gIH1cblxuICAvLyBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWNrUHJvcHMpIHtcbiAgLy8gICBzdXBlcihzY29wZSwgaWQsIHByb3BzKVxuXG4gIC8vICAgY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBSZXBvc2l0b3J5KHRoaXMsIFwiRWNyUmVwb3NpdG9yeVwiLCB7XG4gIC8vICAgICByZXBvc2l0b3J5TmFtZTogXCJ2b2xhdGlsaXR5LWdyb3VwL3ZvbGF0aWxpdHktc2VydmljZXNcIixcbiAgLy8gICAgIGltYWdlU2Nhbk9uUHVzaDogdHJ1ZSxcbiAgLy8gICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWVxuICAvLyAgIH0pXG5cbiAgLy8gICBjb25zdCBiYlNvdXJjZSA9IGNvZGVidWlsZC5Tb3VyY2UuYml0QnVja2V0KHtcbiAgLy8gICAgIC8vIEJpdEJ1Y2tldCBhY2NvdW50XG4gIC8vICAgICBvd25lcjogJ215Y29tcGFueScsXG4gIC8vICAgICAvLyBOYW1lIG9mIHRoZSByZXBvc2l0b3J5IHRoaXMgcHJvamVjdCBiZWxvbmdzIHRvXG4gIC8vICAgICByZXBvOiAncmVwb25hbWUnLFxuICAvLyAgICAgLy8gRW5hYmxlIHdlYmhvb2tcbiAgLy8gICAgIHdlYmhvb2s6IHRydWUsXG4gIC8vICAgICAvLyBDb25maWd1cmUgc28gd2ViaG9vayBvbmx5IGZpcmVzIHdoZW4gdGhlIG1hc3RlciBicmFuY2ggaGFzIGFuIHVwZGF0ZSB0byBhbnkgY29kZSBvdGhlciB0aGFuIHRoaXMgQ0RLIHByb2plY3QgKGUuZy4gU3ByaW5nIHNvdXJjZSBvbmx5KVxuICAvLyAgICAgd2ViaG9va0ZpbHRlcnM6IFtjb2RlYnVpbGQuRmlsdGVyR3JvdXAuaW5FdmVudE9mKGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVVNIKS5hbmRCcmFuY2hJcygnbWFzdGVyJykuYW5kRmlsZVBhdGhJc05vdCgnLi9jZGsvKicpXSxcbiAgLy8gfSk7XG4gIC8vfVxufVxuIl19