"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VgDelegatedDnsStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_certificatemanager_1 = require("aws-cdk-lib/aws-certificatemanager");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
class VgDelegatedDnsStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        var _a;
        super(scope, id, props);
        console.log("Processing", props.zoneName, props.crossAccountDelegationRoleArn);
        // const domainZone = HostedZone.fromLookup(this, "Zone", { domainName: "volatility.com" })
        // const certificate = Certificate.fromCertificateArn(this, "Cert", "arn:aws:acm:us-east-1:123456:certificate/abcdefg")
        const parentZone = aws_route53_1.PublicHostedZone.fromPublicHostedZoneId(this, "RootZone", "Z00960273HOHML2G4GOJT");
        //const parentZone = props?.parentZone as PublicHostedZone
        // const delegationRole = parentZone.crossAccountZoneDelegationRole as Role
        // const delgationRole = Fn.getAtt("RootZone", "CrossAccountZoneDelegationRole").toString()
        const stackPrefixFn = props === null || props === void 0 ? void 0 : props.stackPrefixFn;
        const subZone = new aws_route53_1.PublicHostedZone(this, "SubZone", {
            zoneName: props.zoneName,
            caaAmazon: true
        });
        const makeFqdn = (subdomain) => `${subdomain}.${subZone.zoneName}`;
        const zoneDelegationRecord = new aws_route53_1.CrossAccountZoneDelegationRecord(this, "delegate", {
            delegatedZone: subZone,
            parentHostedZoneId: parentZone.hostedZoneId,
            delegationRole: aws_iam_1.Role.fromRoleArn(this, "CrossAccountDelegationRole", props.crossAccountDelegationRoleArn)
        });
        zoneDelegationRecord.node.addDependency(subZone);
        this.nameservers = subZone.hostedZoneNameServers;
        const subjectAlternativeNames = (_a = props.subjectAlternativeNames) !== null && _a !== void 0 ? _a : [];
        const sans = [subZone.zoneName, ...subjectAlternativeNames.map(makeFqdn)];
        console.log("SANS", sans);
        const certificate = new aws_certificatemanager_1.Certificate(this, `${stackPrefixFn("SubZoneSSLCertificate")}`, {
            domainName: subZone.zoneName,
            subjectAlternativeNames: sans,
            validation: aws_certificatemanager_1.CertificateValidation.fromDns(subZone)
        });
        certificate.node.addDependency(zoneDelegationRecord);
        aws_cdk_lib_1.Tags.of(this).add("Stage", props.stage);
        aws_cdk_lib_1.Tags.of(this).add("Environment", props.environment);
        aws_cdk_lib_1.Tags.of(this).add("Cost", "infra");
        aws_cdk_lib_1.Tags.of(this).add("Cdk", "true");
    }
}
exports.VgDelegatedDnsStack = VgDelegatedDnsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZWdhdGVkLWRucy1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlbGVnYXRlZC1kbnMtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQXFEO0FBQ3JELCtFQUF1RjtBQUN2RixpREFBMEM7QUFDMUMseURBQTRGO0FBWTVGLE1BQWEsbUJBQW9CLFNBQVEsbUJBQUs7SUFHNUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE0Qjs7UUFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtRQUM5RSwyRkFBMkY7UUFDM0YsdUhBQXVIO1FBQ3ZILE1BQU0sVUFBVSxHQUFHLDhCQUFnQixDQUFDLHNCQUFzQixDQUN4RCxJQUFJLEVBQ0osVUFBVSxFQUNWLHVCQUF1QixDQUNKLENBQUE7UUFDckIsMERBQTBEO1FBQzFELDJFQUEyRTtRQUMzRSwyRkFBMkY7UUFDM0YsTUFBTSxhQUFhLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGFBQXVDLENBQUE7UUFDcEUsTUFBTSxPQUFPLEdBQUcsSUFBSSw4QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQ3BELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDLENBQUE7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUUxRSxNQUFNLG9CQUFvQixHQUFHLElBQUksOENBQWdDLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNsRixhQUFhLEVBQUUsT0FBTztZQUN0QixrQkFBa0IsRUFBRSxVQUFVLENBQUMsWUFBWTtZQUMzQyxjQUFjLEVBQUUsY0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLDZCQUE2QixDQUFDO1NBQzFHLENBQUMsQ0FBQTtRQUVGLG9CQUFvQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMscUJBQWlDLENBQUE7UUFDNUQsTUFBTSx1QkFBdUIsU0FBRyxLQUFLLENBQUMsdUJBQXVCLG1DQUFJLEVBQUUsQ0FBQTtRQUNuRSxNQUFNLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN6RSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN6QixNQUFNLFdBQVcsR0FBRyxJQUFJLG9DQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRTtZQUNyRixVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDNUIsdUJBQXVCLEVBQUUsSUFBSTtZQUM3QixVQUFVLEVBQUUsOENBQXFCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUNuRCxDQUFDLENBQUE7UUFDRixXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1FBRXBELGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3ZDLGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ25ELGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDbEMsa0JBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0NBQ0Y7QUFoREQsa0RBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2ssIFN0YWNrUHJvcHMsIFRhZ3MgfSBmcm9tIFwiYXdzLWNkay1saWJcIlxuaW1wb3J0IHsgQ2VydGlmaWNhdGUsIENlcnRpZmljYXRlVmFsaWRhdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyXCJcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWlhbVwiXG5pbXBvcnQgeyBDcm9zc0FjY291bnRab25lRGVsZWdhdGlvblJlY29yZCwgUHVibGljSG9zdGVkWm9uZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtcm91dGU1M1wiXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiXG5cbmludGVyZmFjZSBEZWxlZ2F0ZURuc1N0YWNrUHJvcHMgZXh0ZW5kcyBTdGFja1Byb3BzIHtcbiAgc3RhZ2U6IHN0cmluZ1xuICBlbnZpcm9ubWVudDogc3RyaW5nXG4gIHpvbmVOYW1lOiBzdHJpbmdcbiAgc3RhY2tQcmVmaXhGbjogKGNvbnN0cnVjdE5hbWU6IHN0cmluZykgPT4gc3RyaW5nXG4gIGNyb3NzQWNjb3VudERlbGVnYXRpb25Sb2xlQXJuOiBzdHJpbmdcbiAgc3ViamVjdEFsdGVybmF0aXZlTmFtZXM6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBjbGFzcyBWZ0RlbGVnYXRlZERuc1N0YWNrIGV4dGVuZHMgU3RhY2sge1xuICByZWFkb25seSBuYW1lc2VydmVyczogc3RyaW5nW11cblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGVsZWdhdGVEbnNTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcylcblxuICAgIGNvbnNvbGUubG9nKFwiUHJvY2Vzc2luZ1wiLCBwcm9wcy56b25lTmFtZSwgcHJvcHMuY3Jvc3NBY2NvdW50RGVsZWdhdGlvblJvbGVBcm4pXG4gICAgLy8gY29uc3QgZG9tYWluWm9uZSA9IEhvc3RlZFpvbmUuZnJvbUxvb2t1cCh0aGlzLCBcIlpvbmVcIiwgeyBkb21haW5OYW1lOiBcInZvbGF0aWxpdHkuY29tXCIgfSlcbiAgICAvLyBjb25zdCBjZXJ0aWZpY2F0ZSA9IENlcnRpZmljYXRlLmZyb21DZXJ0aWZpY2F0ZUFybih0aGlzLCBcIkNlcnRcIiwgXCJhcm46YXdzOmFjbTp1cy1lYXN0LTE6MTIzNDU2OmNlcnRpZmljYXRlL2FiY2RlZmdcIilcbiAgICBjb25zdCBwYXJlbnRab25lID0gUHVibGljSG9zdGVkWm9uZS5mcm9tUHVibGljSG9zdGVkWm9uZUlkKFxuICAgICAgdGhpcyxcbiAgICAgIFwiUm9vdFpvbmVcIixcbiAgICAgIFwiWjAwOTYwMjczSE9ITUwyRzRHT0pUXCJcbiAgICApIGFzIFB1YmxpY0hvc3RlZFpvbmVcbiAgICAvL2NvbnN0IHBhcmVudFpvbmUgPSBwcm9wcz8ucGFyZW50Wm9uZSBhcyBQdWJsaWNIb3N0ZWRab25lXG4gICAgLy8gY29uc3QgZGVsZWdhdGlvblJvbGUgPSBwYXJlbnRab25lLmNyb3NzQWNjb3VudFpvbmVEZWxlZ2F0aW9uUm9sZSBhcyBSb2xlXG4gICAgLy8gY29uc3QgZGVsZ2F0aW9uUm9sZSA9IEZuLmdldEF0dChcIlJvb3Rab25lXCIsIFwiQ3Jvc3NBY2NvdW50Wm9uZURlbGVnYXRpb25Sb2xlXCIpLnRvU3RyaW5nKClcbiAgICBjb25zdCBzdGFja1ByZWZpeEZuID0gcHJvcHM/LnN0YWNrUHJlZml4Rm4gYXMgKGlkOiBzdHJpbmcpID0+IHN0cmluZ1xuICAgIGNvbnN0IHN1YlpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZSh0aGlzLCBcIlN1YlpvbmVcIiwge1xuICAgICAgem9uZU5hbWU6IHByb3BzLnpvbmVOYW1lLFxuICAgICAgY2FhQW1hem9uOiB0cnVlXG4gICAgfSlcbiAgICBjb25zdCBtYWtlRnFkbiA9IChzdWJkb21haW46IHN0cmluZykgPT4gYCR7c3ViZG9tYWlufS4ke3N1YlpvbmUuem9uZU5hbWV9YFxuXG4gICAgY29uc3Qgem9uZURlbGVnYXRpb25SZWNvcmQgPSBuZXcgQ3Jvc3NBY2NvdW50Wm9uZURlbGVnYXRpb25SZWNvcmQodGhpcywgXCJkZWxlZ2F0ZVwiLCB7XG4gICAgICBkZWxlZ2F0ZWRab25lOiBzdWJab25lLFxuICAgICAgcGFyZW50SG9zdGVkWm9uZUlkOiBwYXJlbnRab25lLmhvc3RlZFpvbmVJZCxcbiAgICAgIGRlbGVnYXRpb25Sb2xlOiBSb2xlLmZyb21Sb2xlQXJuKHRoaXMsIFwiQ3Jvc3NBY2NvdW50RGVsZWdhdGlvblJvbGVcIiwgcHJvcHMuY3Jvc3NBY2NvdW50RGVsZWdhdGlvblJvbGVBcm4pXG4gICAgfSlcblxuICAgIHpvbmVEZWxlZ2F0aW9uUmVjb3JkLm5vZGUuYWRkRGVwZW5kZW5jeShzdWJab25lKVxuXG4gICAgdGhpcy5uYW1lc2VydmVycyA9IHN1YlpvbmUuaG9zdGVkWm9uZU5hbWVTZXJ2ZXJzIGFzIHN0cmluZ1tdXG4gICAgY29uc3Qgc3ViamVjdEFsdGVybmF0aXZlTmFtZXMgPSBwcm9wcy5zdWJqZWN0QWx0ZXJuYXRpdmVOYW1lcyA/PyBbXVxuICAgIGNvbnN0IHNhbnMgPSBbc3ViWm9uZS56b25lTmFtZSwgLi4uc3ViamVjdEFsdGVybmF0aXZlTmFtZXMubWFwKG1ha2VGcWRuKV1cbiAgICBjb25zb2xlLmxvZyhcIlNBTlNcIiwgc2FucylcbiAgICBjb25zdCBjZXJ0aWZpY2F0ZSA9IG5ldyBDZXJ0aWZpY2F0ZSh0aGlzLCBgJHtzdGFja1ByZWZpeEZuKFwiU3ViWm9uZVNTTENlcnRpZmljYXRlXCIpfWAsIHtcbiAgICAgIGRvbWFpbk5hbWU6IHN1YlpvbmUuem9uZU5hbWUsXG4gICAgICBzdWJqZWN0QWx0ZXJuYXRpdmVOYW1lczogc2FucyxcbiAgICAgIHZhbGlkYXRpb246IENlcnRpZmljYXRlVmFsaWRhdGlvbi5mcm9tRG5zKHN1YlpvbmUpXG4gICAgfSlcbiAgICBjZXJ0aWZpY2F0ZS5ub2RlLmFkZERlcGVuZGVuY3koem9uZURlbGVnYXRpb25SZWNvcmQpXG5cbiAgICBUYWdzLm9mKHRoaXMpLmFkZChcIlN0YWdlXCIsIHByb3BzLnN0YWdlKVxuICAgIFRhZ3Mub2YodGhpcykuYWRkKFwiRW52aXJvbm1lbnRcIiwgcHJvcHMuZW52aXJvbm1lbnQpXG4gICAgVGFncy5vZih0aGlzKS5hZGQoXCJDb3N0XCIsIFwiaW5mcmFcIilcbiAgICBUYWdzLm9mKHRoaXMpLmFkZChcIkNka1wiLCBcInRydWVcIilcbiAgfVxufVxuIl19