version: "3.3"

services:

  # api:
  #   build: .
  #   image: volatility-mfiv-index
  #   env_file: docker-compose.env
  #   environment:
  #     SERVICES: api
  #     PORT: 3000
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
  #     - "traefik.http.services.api-gw.loapostgresalancer.server.port=3000"
  #   networks:
  #     - internal

  cron:
    build: .
    image: volatiliy-services
    container_name: cron
    env_file: docker-compose.env
    environment:
      - SSH_AUTH_SOCK="${SSH_AUTH_SOCK}"
      - SERVICES=services/cron
    depends_on:
      - nats
      - index
    volumes:
      - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}
      - ./:/app
    # networks:
    #   - internal

  index:
    build: .
    image: volatiliy-services
    container_name: index
    env_file: docker-compose.env
    environment:
      SERVICES: services/index
    depends_on:
      - postgresd
      - nats
      - ingest
      - ipfs
    volumes:
      - ./:/app
    # networks:
    #   - internal

  ingest:
    build: .
    image: volatiliy-services
    container_name: ingest
    env_file: docker-compose.env
    environment:
      SERVICES: services/ingest
    depends_on:
      - nats
      - instrument_info
    volumes:
      - ./:/app
    # networks:
    #   - internal

  instrument_info:
    build: .
    image: volatiliy-services
    container_name: instrument_info
    env_file: docker-compose.env
    environment:
      SERVICES: services/instrument_info
    depends_on:
      - nats
    volumes:
      - ./:/app
    # networks:
    #   - internal

  ipfs:
    build: .
    image: volatiliy-services
    container_name: ipfs
    env_file: docker-compose.env
    environment:
      SERVICES: services/ipfs
    depends_on:
      - postgresd
      - nats
    volumes:
      - ./:/app
    # networks:
    #   - internal

  rate:
    build: .
    image: volatiliy-services
    container_name: rate
    env_file: docker-compose.env
    environment:
      SERVICES: services/rate
    depends_on:
      - nats
      - postgresd
    volumes:
      - ./:/app
    # networks:
    #   - internal

  ws:
    build:
      context: .
    image: volatiliy-services
    container_name: ws
    env_file: docker-compose.env
    environment:
      SERVICES: dist/services/ws.service.js
      PORT: 3000
    labels:
      # - "traefik.backend=ws-gw"
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.port=80"
      # - "traefik.port=3000"
      # - "traefik.http.routers.ws.rule=PathPrefix(`/`)"
      # - "traefik.http.routers.ws.entrypoints=websocket"
      # - "traefik.http.routers.ws.rule=Host(`ws.localhost`)"
      - "traefik.web.frontend.rule=Host:vault.domain.com"
      - "traefik.web.port=80"
      - "traefik.ws.frontend.rule=Host:vault.domain.com;Path:/notifications/hub"
      - "traefik.ws.port=3000"
      - "traefik.ws.protocol=ws"
      - "traefik.http.routers.ws.rule=Host(`ws.localhost`) && Path(`/ws`)"
      - "traefik.http.routers.ws.service=ws"
      - "traefik.http.services.ws.loadbalancer.server.port=3000"
      # - traefik.http.routers.ws-gw.tls=true
      # - traefik.http.routers.ws-gw.tls.certresolver=lets-encrypt
      # - "traefik.http.services.ws-gw.loadbalancer.server.url=http://ws-gw/"
      - "traefik.webservice.frontend.entryPoints=http"
      # - "traefik.wss.protocol=ws"
      - "traefik.backend.loadbalancer.sticky=true"
    volumes:
      - ./:/app
    networks:
      - internal
      - web
    depends_on:
      - nats

  nats:
    image: nats:2
    container_name: nats
    ports:
      - '4222:4222'
    restart: unless-stopped
    command:
      - '-m'
      - '8222'
    labels:
      - "traefik.enable=false"
    networks:
      - internal

  nats_exporter:
    image: natsio/prometheus-nats-exporter:latest
    container_name: nats_exporter
    command:
      - '-varz'
      - http://nats:8222
    # networks:
    #   - internal

  postgresd:
    container_name: postgresd
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=mfiv_user
      - POSTGRES_PASSWORD=volatility-postgres-password
      - POSTGRES_HOST=postgresd
      - POSTGRES_PORT=5432
      - POSTGRES_postgres=volatility_development
    volumes:
      - pgdata1:/var/lib/postgresql/data
    # networks:
    #   - internal

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379"

  traefik:
    image: traefik:v2.6
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--api=true"
      - "--api.insecure=true" # Don't do that in production!
      - "--api.debug=true"
      # - "--entryPoints.http.address=:80"
      - "--entrypoints.websocket.address=:80"
      - "--entryPoints.metrics.address=:8082"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch=true"
      # - "--providers.docker.domain=volatility.localhost"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--accessLog"
    ports:
      - "3000:80"
      - "3001:8080"
      # - "80:80"
      # - "8080:8080"
      # - 3000:80
      # - 3001:8080
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /dev/null:/traefik.toml
      # # - ./traefik/acme.json:/acme.json
      # - ./traefik/traefik.toml:/traefik.toml
      # - /dev/null:/traefik.toml
    networks:
      - web
      - internal
      # - default

networks:
  web:
    external: true
  internal:
    external: false

volumes:
  pgdata1: {}
